---
layout: custom
title: EC2 Solutions Architect Associate level
date: 2022-12-28 05:07:00 +0900
last_modified_at: 2022-12-29 02:15:00 +0900
category: SAA-C02
tags: ["AWS", "SAA-C02", "EC2"]
published: False
---

> EC2 - Solution Architect Associate level

## 1. EC2 - Solution Architect Associate level
### 1.1. Private vs Public IP (IPv4)
* Networking has two sorts of IPs. IPv4 and IPv6:
    * IPv4: 1.160.10.240
    * IPv6: 3ffe:1900:4545:3:200:f8ff:fe21:67cf

* IPv4 is still the most common format used online. 
* IPv6 is newer and solves problems for the Internet of Things (IoT).

* IPv4 allows for __3.7 billion__ different addresses in the public space
* IPv4: [0-255].[0-255].[0-255].[0-255].

* 네트워킹에는 두 가지 종류의 IP가 있음. IPv4 및 IPv6:
    * IPv4: 1.160.10.240
    * IPv6: 3ffe:1900:4545:3:200:f8ff:fe21:67cf

* IPv4는 여전히 온라인에서 사용되는 가장 일반적인 형식임.
* IPv6는 더 신식이고 사물인터넷(IoT)의 문제를 해결함.

* IPv4는 공용 공간에서 __37억__ 개의 서로 다른 주소를 허용함. (거의 고갈되어감)
* IPv4: [0-255].[0-255].[0-255].[0-255].

* Example
![Untitled](/assets/img/aws_saa_c02/20221228_ec2saa_public_private_ip.JPG)

### 1.2. Private vs Public IP (IPv4) Fundamental Differences
* Public IP:
    * Public IP means the machine can be identified on the internet (WWW)
    * Must be unique across the whole web (not two machines can have the same public IP). 
    * Can be geo-located easily

* Private IP:
    * Private IP means the machine can only be identified on a private network only
    * The IP must be unique across the private network
    * BUT two different private networks (two companies) can have the same IPs. 
    * Machines connect to WWW using a NAT + internet gateway (a proxy)
    * Only a specified range of IPs can be used as private IP

* 공용 IP:
    * 공용 IP는 인터넷에서 기계를 식별할 수 있음을 의미합니다(WW).
    * 전체 웹에서 고유해야 합니다(두 컴퓨터가 동일한 공용 IP를 가질 수 없음).
    * 지리적 위치 파악이 용이함

* 개인 IP:
    * 개인 IP는 개인 네트워크에서만 시스템을 식별할 수 있음을 의미합니다.
    * IP는 전용 네트워크에서 고유해야 합니다.
    * 그러나 두 개의 서로 다른 사설 네트워크(두 회사)는 동일한 IP를 가질 수 있습니다.
    * 시스템이 NAT + 인터넷 게이트웨이(프록시)를 사용하여 WWW에 연결됨
    * 지정된 범위의 IP만 개인 IP로 사용할 수 있습니다.

### 1.3. Elastic IPs
* When you stop and then start an EC2 instance, it can change its public IP. 
* If you need to have a fixed public IP for your instance, you need an Elastic IP
* An Elastic IP is a public IPv4 IP you own as long as you don’t delete it
* You can attach it to one instance at a time

* EC2 인스턴스를 중지한 다음 시작하면 해당 인스턴스가 공용 IP를 변경할 수 있습니다.
* 인스턴스에 고정 공용 IP가 필요한 경우 Elastic IP가 필요합니다.
* Elastic IP는 삭제하지 않는 한 소유한 공용 IPv4 IP입니다.
* 한 번에 하나의 인스턴스에 연결할 수 있습니다.

* With an Elastic IP address, you can mask the failure of an instance or software by rapidly remapping the address to another instance in your account. 
* You can only have 5 Elastic IP in your account (you can ask AWS to increase that).
* Overall, __try to avoid using Elastic IP__:
    * They often reflect poor architectural decisions
    * Instead, use a random public IP and register a DNS name to it
    * Or, as we’ll see later, use a Load Balancer and don’t use a public IP

* Elastic IP 주소를 사용하면 계정의 다른 인스턴스에 주소를 신속하게 재매핑하여 인스턴스 또는 소프트웨어의 실패를 가릴 수 있습니다.
* 계정에는 5개의 Elastic IP만 있을 수 있습니다(AWS에 이를 늘려달라고 요청할 수 있습니다).
* 결론적으로 __Elastic IP를 사용하지 않도록 하십시오.__
    * 이들은 종종 열악한 아키텍처 결정을 반영합니다.
    * 대신 임의의 공용 IP를 사용하고 DNS 이름을 등록합니다.
    * 또는 나중에 알 수 있듯이 로드 밸런서를 사용하고 공용 IP를 사용하지 마십시오.

### 1.4. Private vs Public IP (IPv4) In AWS EC2 – Hands On
* By default, your EC2 machine comes with:
    * A private IP for the internal AWS Network
    * A public IP, for the WWW. 
* When we are doing SSH into our EC2 machines:
    * We can’t use a private IP, because we are not in the same network 
    * We can only use the public IP. 
* If your machine is stopped and then started, __the public IP can change__

* 기본적으로 EC2 시스템은 다음과 같이 제공됩니다.
    * 내부 AWS 네트워크용 개인 IP
    * WWW를 위한 공용 IP입니다.
* EC2 시스템에 SSH를 실행하는 경우:
    * 우리는 같은 네트워크에 있지 않기 때문에 개인 IP를 사용할 수 없습니다.
    * 공용 IP만 사용할 수 있습니다.
* 머신이 중지된 후 시작되면 __공용 IP가 변경될 수 있습니다.__


## 2. Placement Groups
### 2.1. Placement Groups
* Sometimes you want control over the EC2 Instance placement strategy
* That strategy can be defined using placement groups
* When you create a placement group, you specify one of the following strategies for the group:
    * Cluster—clusters instances into a low-latency group in a single Availability Zone
    * Spread—spreads instances across underlying hardware (max 7 instances per group per AZ)
    * Partition—spreads instances across many different partitions (which rely on different sets of racks) within an AZ. Scales to 100s of EC2 instances per group (Hadoop, Cassandra, Kafka)

* 때때로 EC2 인스턴스 배치 전략을 제어하고 싶을 때가 있습니다.
* 배치 그룹을 사용하여 전략을 정의할 수 있습니다.
* 배치 그룹을 생성할 때 그룹에 대해 다음 전략 중 하나를 지정합니다.
    * 클러스터—단일 가용성 영역에서 대기 시간이 짧은 그룹으로 인스턴스를 클러스터링
    * 분산—기본 하드웨어에 인스턴스를 분산(AZ당 그룹당 최대 7개의 인스턴스)
    * 파티션—AZ 내의 여러 다른 파티션(다른 랙 세트에 의존)으로 인스턴스를 분산시킵니다. 그룹당 100대의 EC2 인스턴스로 확장(Hadoop, Cassandra, Kafka)

### 2.2. Placement Groups Cluster
* 모든 EC2 인스턴스가 동일한 랙(Rack)에 있음 (동일한 하드웨어와 동일한 가용 영역에 있음)
![Untitled](/assets/img/aws_saa_c02/20221229_ec2saa_placement_groups_cluster.JPG)

* Pros: Great network (10 Gbps bandwidth between instances with Enhanced Networking enabled - recommended)
* Cons: If the rack fails, all instances fails at the same time
* Use case: 
    * Big Data job that needs to complete fast
    * Application that needs extremely low latency and high network throughput

* 장점: 우수한 네트워크(향상된 네트워킹을 사용하는 인스턴스 간 10Gbps 대역폭 - 권장)
* 단점: 랙에 장애가 발생하면 모든 인스턴스가 동시에 장애가 발생합니다.
* 사용 사례:
    * 신속하게 완료해야 하는 빅 데이터 작업
    * 매우 짧은 대기 시간과 높은 네트워크 처리량이 필요한 애플리케이션

### 2.3. Placement Groups Spread
* Placement Groups Cluster 의 완전히 반대 개념 (실패 위험을 최소화)
* 모든 EC2 인스턴스가 다른 하드웨어에 위치
![Untitled](/assets/img/aws_saa_c02/20221229_ec2saa_placement_groups_spread.JPG)

* Pros: 
    * Can span across Availability Zones (AZ)
    * Reduced risk is simultaneous failure
    * EC2 Instances are on different physical hardware
* Cons: 
    * Limited to 7 instances per AZ per placement group
* Use case: 
    * Application that needs to maximize high availability
    * Critical Applications where each instance must be isolated from failure from each other

* 장점:
    * AZ(Availability Zones) 범위로 확장 가능
    * 위험 감소는 동시 실패입니다.
    * EC2 인스턴스가 서로 다른 물리적 하드웨어에 있음
* 단점:
    * 배치 그룹당 AZ당 7개 인스턴스로 제한
* 사용 사례:
    * 고가용성을 극대화해야 하는 애플리케이션
    * 각 인스턴스를 서로 장애로부터 격리해야 하는 중요 애플리케이션

### 2.4. Placement Groups Partition
* 여러 가용 영역의 파티션에 인스턴스를 분산
* 각 파티션은 AWS의 랙을 나타냄
* 파티션이 많으면 인스턴스가 여러 하드웨어 랙에 분산되어 랙 실패로부터 안전함
![Untitled](/assets/img/aws_saa_c02/20221229_ec2saa_placement_groups_partition.JPG)

* Up to 7 partitions per AZ
* Can span across multiple AZs in the same region
* Up to 100s of EC2 instances
* The instances in a partition do not share racks with the instances in the other partitions
* A partition failure can affect many EC2 but won’t affect other partitions
* EC2 instances get access to the partition information as metadata
* Use cases: HDFS, HBase, Cassandra, Kafka

* AZ당 최대 7개의 파티션
* 동일한 영역에 있는 여러 AZ에 걸쳐 있을 수 있음
* 최대 100대의 EC2 인스턴스
* 파티션의 인스턴스가 다른 파티션의 인스턴스와 랙을 공유하지 않습니다.
* 파티션 장애는 많은 EC2에 영향을 미칠 수 있지만 다른 파티션에는 영향을 미치지 않습니다.
* EC2 인스턴스가 메타데이터로 파티션 정보에 액세스합니다.
* __사용 사례__: HDFS, HBase, 카산드라, 카프카


## 3. Elastic Network Interfaces (ENI)
### 3.1. ENI
![Untitled](/assets/img/aws_saa_c02/20221229_ec2saa_eni.JPG)
* Logical component in a VPC that represents a __virtual network card__
* The ENI can have the following attributes:
    * Primary private IPv4, one or more secondary IPv4
    * One Elastic IP (IPv4) per private IPv4
    * One Public IPv4
    * One or more security groups
    * A MAC address 
* You can create ENI independently and attach them on the fly (move them) on EC2 instances for failover
* Bound to a specific availability zone (AZ)

* __가상 네트워크 카드__ 를 나타내는 VPC의 논리적 구성 요소
* ENI는 다음과 같은 속성을 가질 수 있다.
    * 기본 전용 IPv4, 하나 이상의 보조 IPv4
    * 개인 IPv4당 하나의 탄력적 IP(IPv4)
    * 단일 공용 IPv4
    * 하나 이상의 Security Group
    * MAC 주소
* 독립적으로 ENI를 생성하고 페일오버를 위해 EC2 인스턴스에서 즉시 연결(이동)할 수 있습니다.
* 특정 AZ(Availability Zone)에 바인딩됨


## 4. EC2 Hibernate
### 4.1. EC2 Hibernate
* We know we can stop, terminate instances
    * __Stop__ – the data on disk (EBS) is kept intact in the next start
    * __Terminate__ – any EBS volumes (root) also set-up to be destroyed is lost
* On start, the following happens:
    * First start: the OS boots & the EC2 User Data script is run
    * Following starts: the OS boots up 
    * Then your application starts, caches get warmed up, and that can take time!

* 우리는 우리가 인스턴스을 멈추고 끝낼 수 있다는 것을 안다.
    * 중지 – 다음 시작 시 디스크의 데이터(EBS)가 그대로 유지됨
    * 종료 – 삭제하도록 설정된 EBS 볼륨(루트)도 손실됨
* 시작 시 다음과 같은 현상이 발생함
    * 첫 번째 시작: OS 부팅 및 EC2 사용자 데이터 스크립트 실행
    * 다음 시작: OS 부팅
    * 그러면 애플리케이션이 시작되고 캐시가 워밍업되므로 시간이 걸릴 수 있음

![Untitled](/assets/img/aws_saa_c02/20221229_ec2saa_ec2_hibernate.JPG)

* Introducing __EC2 Hibernate__: 
    * The in-memory (RAM) state is preserved
    * The instance boot is much faster! (the OS is not stopped / restarted)
    * Under the hood: the RAM state is written to a file in the root EBS volume
    * The root EBS volume must be encrypted

* __Use cases__:
    * Long-running processing
    * Saving the RAM state
    * Services that take time to initialize

* __EC2 최대 절전 모드__ 소개:
    * 메모리 내(RAM) 상태가 유지됨
    * 인스턴스 부팅이 훨씬 빠릅니다! (OS가 중지/재시작되지 않음)
    * 후드 아래: RAM 상태가 루트 EBS 볼륨의 파일에 기록됩니다.
    * 루트 EBS 볼륨을 암호화해야 합니다.

* __사용 사례__:
    * 장기 처리
    * RAM 상태 저장
    * 초기화에 시간이 걸리는 서비스

### 4.2 EC2 Hibernate – Good to know
* __Supported Instance Families__ – C3, C4, C5, I3, M3, M4, R3, R4, T2, T3, …
* __Instance RAM Size__ – must be less than 150 GB.
* __Instance Size__ – not supported for bare metal instances.
* __AMI__ – Amazon Linux 2, Linux AMI, Ubuntu, RHEL, CentOS & Windows… 
* __Root Volume__ – must be EBS, encrypted, not instance store, and large
* Available for __On-Demand__, __Reserved__ and __Spot__ Instances

* An instance can __NOT__ be hibernated more than 60 days

* __지원되는 인스턴스 제품군__ – C3, C4, C5, I3, M3, M4, R3, R4, T2, T3 등
* __인스턴스 RAM 크기__ – 150GB 미만이어야 합니다.
* __인스턴스 크기__ – 베어 메탈 인스턴스에는 지원되지 않습니다.
* __AMI__ – Amazon Linux 2, Linux AMI, Ubuntu, RHEL, CentOS 및 Windows...
* __루트 볼륨(Root Volume)__ – EBS, 암호화, 인스턴스 저장소가 아닌 대규모여야 합니다.
* __온디맨드__, __예약__ 및 __스폿__ 인스턴스에 사용 가능

* 인스턴스는 60일 이상 최대 절전 모드로 전환할 수 __없습니다__


### Reference
Stephane Maarek,【글로벌 Best】 AWS Certified Solutions Architect Associate 시험합격!, Udemy
 (https://www.udemy.com/course/best-aws-certified-solutions-architect-associate/)