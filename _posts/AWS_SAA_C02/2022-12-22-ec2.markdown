---
layout: custom
title: EC2 Basics
date: 2022-12-22 16:08:00 +0900
last_modified_at: 2022-12-28 05:03:00 +0900
category: SAA-C02
tags: ["AWS", "SAA-C02", "EC2"]
published: False
---

> Elastic Compute Cloud

## 1. EC2
### 1.1. EC2
* EC2 is one of the most popular of AWS' offering
* EC2 = Elastic Compute Cloud = Infrastructure as a Service
* It mainly consists in the capablity of :
    * Renting virtual machines (EC2)
    * Storing data on virtual drive (EBS)
    * Distributing load across machines (ELB)
    * Scaling the services using an auto-scaling group (ASG)
* Knowing EC2 is fundamental to understand how the Cloud works

* EC2는 가장 인기 있는 AWS 제품 중 하나임
* EC2 = 탄력적 컴퓨팅 클라우드 = 서비스로서의 인프라 (IaaS)
* 주로 다음과 같은 기능으로 구성됨
    * 가상 머신 임대(EC2)
    * 가상 드라이브(EBS)에 데이터 저장
    * ELB(기계 전체에 부하 분산)
    * ASG(Auto-Scaling Group)를 이용한 서비스 확장
* 클라우드 작동 방식을 이해하려면 EC2를 알아야 함

### 1.2. EC2 sizing & configuration options
* Operating System (OS): Linux, Windows or Mac OS
* How much compute power & cores (CPU)
* How much random-access memory(RAM)
* How much storage space:
    * Network-attached (EBS & EFS)
    * hardware (EC2 Instance Store)
* Network card: speed pf the card, public IP address
* Firewall rules: security group
* Bootstrap script (configure at first launch): EC2 User Data

* 얼마나 많은 컴퓨팅 파워 및 코어(CPU)
* 얼마나 많은 랜덤 액세스 메모리(RAM)
* 얼마나 많은 저장 공간:
    * 네트워크 연결(EBS & EFS)
    * 하드웨어(EC2 인스턴스 스토어)
* 네트워크 카드: 카드의 속도, 공용 IP 주소
* 방화벽 규칙: 보안 그룹
* 부트스트랩 스크립트(처음 시작할 때 구성): EC2 사용자 데이터

### 1.3. EC2 User Data
* It is possible to bootstrap our instances using an __EC2 User data__ script. 
* __bootstrapping__ means launching commands when a machine starts
* That script is __only run once__ at the instance __first start__
* EC2 user data is used to automate boot tasks such as:
    * Installing updates
    * Installing software
    * Downloading common files from the internet
    * Anything you can think of
* The EC2 User Data Script runs with the root user

* __EC2 사용자 데이터__ 스크립트를 사용하여 인스턴스를 부트스트랩할 수 있습니다.
* __부트스트래핑__ 은 머신이 시작될 때 명령을 실행하는 것을 의미합니다.
* 해당 스크립트는 인스턴스가 __처음 시작될 때 한 번만 실행__ 됩니다.
* EC2 사용자 데이터는 다음과 같은 부팅 작업을 자동화하는 데 사용됩니다.
    * 업데이트 설치
    * 소프트웨어 설치
    * 인터넷에서 공통 파일 다운로드
    * 당신이 생각할 수 있는 모든 것
* EC2 사용자 데이터 스크립트는 루트 사용자로 실행됩니다.


## 2. EC2 Instance Types
### 2.1. Overview
* m5.2xlarge
    * m: instance class 
    * 5: generation (AWS improves them over time)
    * 2xlarge: size within the instance class

* m5.2xlarge
    * m: 인스턴스 클래스
    * 5: 세대(AWS는 시간이 지남에 따라 개선함)
    * 2xlarge: 인스턴스 클래스 내 크기

### 2.2. EC2 Instance Types – General Purpose
* Great for compute-intensive tasks that require high performance processors:
    * Batch processing workloads
    * Media transcoding
    * High performance web servers
    * High performance computing (HPC)
    * Scientific modeling & machine learning
    * Dedicated gaming servers

* 고성능 프로세서가 필요한 컴퓨팅 집약적인 작업에 적합:
    * 일괄 처리 워크로드
    * 미디어 트랜스코딩
    * 고성능 웹 서버
    * 고성능 컴퓨팅(HPC)
    * 과학적 모델링 및 기계 학습
    * 전용 게임 서버

### 2.3. EC2 Instance Types – Memory Optimized
* Fast performance for workloads that process large data sets in memory
* Use cases: 
    * High performance, relational/non-relational databases
    * Distributed web scale cache stores
    * In-memory databases optimized for BI (business intelligence)
    * Applications performing real-time processing of big unstructured data

* 메모리에서 대용량 데이터 세트를 처리하는 워크로드를 위한 빠른 성능
* 사용 사례:
    * 고성능, 관계형/비관계형 데이터베이스
    * 분산 웹 스케일 캐시 저장소
    * BI(비즈니스 인텔리전스)에 최적화된 인메모리 데이터베이스
    * 대용량 비정형 데이터를 실시간으로 처리하는 애플리케이션

### 2.3. EC2 Instance Types – Memory Optimized
* Great for storage-intensive tasks that require high, sequential read and write access to large data sets on local storage
* Use cases: 
    * High frequency online transaction processing (OLTP) systems
    * Relational & NoSQL databases
    * Cache for in-memory databases (for example, Redis)
    * Data warehousing applications
    * Distributed file systems

* 로컬 스토리지의 대용량 데이터 세트에 대한 높은 순차적 읽기 및 쓰기 액세스가 필요한 스토리지 집약적 작업에 적합
* 사용 사례:
    * 고주파 온라인 거래 처리(OLTP) 시스템
    * 관계형 및 NoSQL 데이터베이스
    * 인메모리 데이터베이스용 캐시(예: Redis)
    * 데이터 웨어하우징 애플리케이션
    * 분산 파일 시스템


## 3. Security Groups
### 3.1. Security Groups
* Security Groups are the fundamental of network security in AWS
* They control how traffic is allowed into or out of our EC2 Instances.
* Security groups only contain __allow__ rules
* Security groups rules can reference by IP or by security group

* 보안 그룹은 AWS 네트워크 보안의 기본입니다.
* EC2 인스턴스로 들어오고 나가는 트래픽이 허용되는 방식을 제어합니다.
* 보안 그룹에는 __허용__ 규칙만 포함됩니다.
* 보안 그룹 규칙은 IP 또는 보안 그룹에서 참조할 수 있습니다.

* Security groups are acting as a “firewall” on EC2 instances
* They regulate:
    * Access to Ports
    * Authorised IP ranges – IPv4 and IPv6
    * Control of inbound network (from other to the instance)
    * Control of outbound network (from the instance to other)

* 보안 그룹은 EC2 인스턴스에서 "방화벽" 역할을 합니다.
* 규제 대상:
    * 포트에 대한 액세스
    * 승인된 IP 범위 – IPv4 및 IPv6
    * 인바운드 네트워크 제어(다른 인스턴스에서 인스턴스로)
    * 아웃바운드 네트워크 제어(인스턴스에서 다른 인스턴스로)

### 3.2. Security Groups Diagram
![Untitled](/assets/img/aws_saa_c02/221226_ec2_security_groups_diagram.JPG)
* ec2 instance
* inbound 규칙과 outbound 규칙이 있는 하나의 security group
* 22번 포트 허용
    * 허용된 ip의 트래픽은 ec2 instance로 이동할 수 있음
    * 다른 ip는 방화벽이 차단하기 때문에 ec2 instance에 액세스 불가 (time out)
* outbound 디폴트는 모든 트래픽 허용

### 3.3. Security Groups Good to know (알아두면 좋은 정보)
* Can be attached to multiple instances
* Locked down to a region / VPC combination
* Does live “outside” the EC2 – if traffic is blocked the EC2 instance won’t see it
* __It’s good to maintain one separate security group for SSH access__
* If your application is not accessible (time out), then it’s a security group issue
* If your application gives a “connection refused“ error, then it’s an application error or it’s not launched
* All inbound traffic is __blocked__ by default
* All outbound traffic is __authorised__ by default

* 여러 인스턴스에 연결 가능
* 리전/VPC 조합으로 잠김
* EC2 "외부"에서 작동합니다. 트래픽이 차단되면 EC2 인스턴스에서 볼 수 없습니다.
* __SSH 접속을 위한 별도의 보안 그룹 하나를 유지하는 것이 좋습니다__
* 애플리케이션에 액세스할 수 없는 경우(시간 초과) 보안 그룹 문제입니다.
* 응용 프로그램에서 "연결 거부" 오류가 발생하면 응용 프로그램 오류이거나 실행되지 않은 것입니다.
* 모든 인바운드 트래픽은 기본적으로 __차단__됩니다.
* 모든 아웃바운드 트래픽은 기본적으로 __승인__됩니다.

### 3.4. Referencing other Security Groups Diagram
![Untitled](/assets/img/aws_saa_c02/221226_ec2_security_groups_diagram_2.JPG)
* 로드 밸런서 사용
* 보안 그룹의 다른 보안 그룹을 참조하는 방법

* security group 1 inbound (허용 - security group 1, security group 2)
* 새로운 ec2 instance 를 생성했을 때, (올바른 보안 그룹에 연결되었기 때문에) __ip와 상관없이__ 다른 인스턴스를 통해 바로 통신 가능
* security group 3 은 security group 1 의 인바운드 규칙으로 거부됨

### 3.5. Classic Ports to know (중요!)
* 22 = SSH (Secure Shell) - log into a Linux instance
* 21 = FTP (File Transfer Protocol) – upload files into a file share
* 22 = SFTP (Secure File Transfer Protocol) – upload files using SSH
* 80 = HTTP – access unsecured websites
* 443 = HTTPS – access secured websites
* 3389 = RDP (Remote Desktop Protocol) – log into a Windows instance

* 22 = SSH(Secure Shell) - Linux 인스턴스에 로그인
* 21 = FTP(파일 전송 프로토콜) – 파일 공유에 파일 업로드
* 22 = SFTP(보안 파일 전송 프로토콜) – SSH를 사용하여 파일 업로드
* 80 = HTTP – 보안되지 않은 웹사이트에 액세스
* 443 = HTTPS – 보안 웹사이트 액세스
* 3389 = RDP(원격 데스크톱 프로토콜) – Windows 인스턴스에 로그인


## 4. EC2 Instances
### 4.1. EC2 Instances Purchasing Options (중요!!)
사례에 따라 최대로 비용을 절감할 수 있고 특정 규칙을 준수할 수 있는 최적의 EC2 Instance 구매 옵션을 물어보는 문제

* __On-Demand Instances__ – short workload, predictable pricing, pay by second
* __Reserved__ (1 & 3 years)
    * __Reserved Instances__ – long workloads 
    * __Convertible Reserved Instances__ – long workloads with flexible instances
    * __Scheduled Reserved Instances__ - every Thursday beween 3 and 6 pm
* __Savings Plans__ (1 & 3 years) – commitment to an amount of usage, long workload
* __Spot Instances__ – short workloads, cheap, can lose instances (less reliable)
* __Dedicated Hosts__ – book an entire physical server, control instance placement
* __Dedicated Instances__ – no other customers will share your hardware
* __Capacity Reservations__ – reserve capacity in a specific AZ for any duration

* __온디맨드 인스턴스__ – 짧은 워크로드, 예측 가능한 가격, 초당 지불
* __예약__ (1 & 3 년, 최소 1년)
    * 예약 인스턴스 – 긴 워크로드
    * 전환 가능한 예약 인스턴스 – 유연한 인스턴스를 사용한 긴 워크로드
    * 정기 예약 인스턴스 - 매주 목요일 오후 3시~6시
        * Scheduled Reserved Instances 는 현재 사용되지 않지만 시험에 나올 수는 있음
* __저축 계획__(1년 및 3년) – 사용량, 긴 작업량에 대한 약정
* __스팟 인스턴스__ – 짧은 워크로드, 저렴, 인스턴스 손실 가능(신뢰도 낮음)
* __전용 호스트__ – 전체 물리적 서버 예약, 인스턴스 배치 제어
* __전용 인스턴스__ – 다른 고객이 귀하의 하드웨어를 공유하지 않습니다.
* __용량 예약__ – 모든 기간 동안 특정 AZ의 용량 예약

### 4.2. EC2 On Demand (중요!!)
* Pay for what you use:
    * Linux or Windows - billing per second, after the first minute
    * All other operating systems - billing per hour 
* Has the highest cost but no upfront payment
* No long-term commitment

* Recommended for __short-term__ and __un-interrupted__ workloads, where you can't predict how the application will behave

* 사용한 만큼 지불:
    * Linux 또는 Windows - 처음 1분이 지나면 초당 청구
    * 기타 모든 운영 체제 - 시간당 청구
* 비용이 가장 높지만 선불은 없음
* 장기 약정 없음 (사용 해지, 중지, 시작이 언제든 가능)

* 애플리케이션이 어떻게 작동할지 예측할 수 없는 __단기적__ 이고 __중단 없는__ 워크로드에 권장됩니다.

### 4.3. EC2 Reserved Instances (중요!!)
* Up to __72%__ discount compared to On-demand
* You reserve a specific instance attributes __(Instance Type, Region, Tenancy, OS)__
* __Reservation Period__ – __1 year__ (+discount) or __3 years__ (+++discount)
* __Payment Options__ – __No Upfront__ (+), __Partial Upfront__ (++), __All Upfront__ (+++)
* __Reserved Instance’s Scope__ – __Regional__ or __Zonal__ (reserve capacity in an AZ)
* Recommended for steady-state usage applications (think database)
* You can buy and sell in the Reserved Instance Marketplace

* __Convertible Reserved Instance__
    * Can change the EC2 instance type, instance family, OS, scope and tenancy
    * Up to __66%__ discount
        * _Note_: the % discounts are different from the video as AWS change them over time – the exact numbers are not needed for the exam. This is just for illustrative purposes

* __Scheduled Reserved Instances__
    * launch within time window you reserve
    * When you require a fraction of day/week /month
    * Still commitment over 1 to 3 years

* 온디맨드 대비 최대 __72%__ 할인
* 특정 인스턴스 속성 __(인스턴스 유형, 지역, 테넌시, OS)__ 을 예약합니다.
* __예약기간__ – __1년__(+할인) 또는 __3년__(+++할인)
* 결제 옵션 – __선결제 없음__(+), __부분 선결제__(++), __전체 선결제__(+++)
* __예약 인스턴스의 범위__ – __지역__ 또는 __구역__(AZ에서 용량 예약)
* 꾸준한 사용 애플리케이션에 권장됨 (데이터베이스)
* 예약 인스턴스 마켓플레이스에서 구매 및 판매 가능

* __전환형 예약 인스턴스__
    * EC2 인스턴스 유형, 인스턴스 제품군, OS, 범위 및 테넌시를 변경할 수 있습니다.
    * 최대 __66%__ 할인
        * _참고_: % 할인은 AWS가 시간이 지남에 따라 변경하므로 동영상과 다릅니다. 시험에는 정확한 수치가 필요하지 않습니다. 이것은 단지 설명을 위한 것입니다.

* __예약된 예약 인스턴스__
    * 예약한 시간 내에 실행
    * 일/주/월 단위가 필요한 경우
    * 1~3년 이상 지속되는 약속
        * Scheduled Reserved Instances 는 현재 사용되지 않지만 시험에 나올 수는 있음

* EC2 Savings Plans
    * Get a discount based on long-term usage (up to 72% - same as RIs)
    * Commit to a certain type of usage ($10/hour for 1 or 3 years)
    * Usage beyond EC2 Savings Plans is billed at the On-Demand price
    * Locked to a specific instance family & AWS region (e.g., M5 in us-east-1)

    * Flexible across:
        * Instance Size (e.g., m5.xlarge, m5.2xlarge)
        * OS (e.g., Linux, Windows)
        * Tenancy (Host, Dedicated, Default)

* EC2 절감 계획
    * 장기 사용량 기준 할인(최대 72% - Reserved Instances 와 동일)
    * 특정 유형의 사용(1년 또는 3년 동안 시간당 10달러)을 커밋합니다.
    * EC2 절감 계획을 초과하는 사용량은 주문형 가격으로 청구됩니다.
    * 특정 인스턴스 제품군 및 AWS 지역(예: us-east-1의 M5)에 고정됨

    * 유연성:
        * 인스턴스 크기(예: m5.xlarge, m5.2xlarge)
        * OS(예: Linux, Windows)
        * 테넌트(호스트, 전용, 기본)

### 4.4. EC2 Spot Instances (중요!!)
할인율이 가장 높은 옵션
* Can get a __discount of up to 90%__ compared to On-demand
* Instances that you can “lose” at any point of time if your max price is less than the current spot price
* The __MOST cost-efficient__ instances in AWS

* Useful for workloads that are resilient to failure
    * Batch jobs
    * Data analysis
    * Image processing
    * Any distributed workloads
    * Workloads with a flexible start and end time

* Not suitable for critical jobs or databases

* On-demand 대비 최대 90% 할인 가능
* 최대 가격이 현재 현물 가격보다 낮은 경우 언제든지 "손실"할 수 있는 인스턴스
* AWS에서 __가장 비용 효율적인__ 인스턴스

* __장애에 대한 복원력이 뛰어난 워크로드에 유용합니다.__
    * 배치 작업
    * 데이터 분석
    * 이미지 처리
    * 모든 __분산__ 워크로드
    * 시작 시간과 종료 시간이 유연한 워크로드

* __중요한 작업 또는 데이터베이스에 적합하지 않음__

### 4.5. EC2 Dedicated Hosts (전용 호스트) (중요!!)
* A physical server with EC2 instance capacity fully dedicated to your use
* Allows you address __compliance requirements__ and __use your existing server bound software licenses__ (per-socket, per-core, pe—VM software licenses)
* Purchasing Options:
    * __On-demand__ – pay per second for active Dedicated Host
    * __Reserved__ - 1 or 3 years (No Upfront, Partial Upfront, All Upfront)
* The most expensive option

* Useful for software that have complicated licensing model (BYOL – Bring Your Own License)
* Or for companies that have strong regulatory or compliance needs

* 사용자 전용 EC2 인스턴스 용량을 갖춘 물리적 서버
* __컴플라이언스 요구사항__ 을 해결하고 __기존 서버 바인딩 소프트웨어 라이센스__(소켓 단위, 코어 단위, VM 소프트웨어 라이센스)를 사용할 수 있습니다.
* 구매 옵션:
    * __주문형__ – 활성 전용 호스트에 대한 초당 결제
    * __예약__ - 1년 또는 3년(선불 불가, 부분선불, 모두선불)
* 가장 비싼 옵션

* 복잡한 라이센스 모델(BYOL – Bring Your Own License)을 사용하는 소프트웨어에 유용합니다.
* 또는 강력한 규제 또는 규정 준수 요구 사항이 있는 기업의 경우

### 4.6. EC2 Dedicated Instances (중요!!)
Dedicated Hosts(전용 호스트) 의 약한 버전
* Instances run on hardware that’s dedicated to you
* May share hardware with other instances in same account
* No control over instance placement (can move hardware after Stop / Start)

* 사용자 전용 하드웨어에서 인스턴스 실행
* 동일한 계정의 다른 인스턴스와 하드웨어를 공유할 수 있음
* 인스턴스 배치를 제어할 수 없음 (Stop/Start 후 하드웨어 이동 가능)

![Untitled](/assets/img/aws_saa_c02/221226_ec2_dedicated_hosts_vs_instances.JPG)

* Dedicated Hosts
    * 전용 물리적 서버 사용 (공통점)
    * __호스트__ 당 청구
    * 하드웨어의 근본에 접근 권한을 많이 제공
        * 전용 호스트에서 사용 가능한 다양한 서버 결합 라이센스를 받을 수 있음
            * 소켓, 코어, 호스트id 등의 접근 권한
    * 관여도가 높기 때문에 서버 결합 라이센스가 있는 경우에 적합

* Dedicated Instances
    * 전용 물리적 서버 사용 (공통점)
    * __인스턴스__ 당 청구
    * 전용 인스턴스가 제공하는 딱 하나 : automatic instance placement (자동 인스턴스 배치)
    * 높은 수준의 규제 준수가 필요해 하드웨어를 타인과 공유하지 않고자 할 때 적합

### 4.7. EC2 Capacity Reservations (용량 예약) (중요!!)
* Reserve __On-Demand__ instances capacity in a specific AZ for any duration
* You always have access to EC2 capacity when you need it
* No time commitment (create/cancel anytime), __no billing discounts__
* Combine with Regional Reserved Instances and Savings Plans to benefit from billing discounts
* You’re charged at On-Demand rate whether you run instances or not

* Suitable for short-term, uninterrupted workloads that needs to be in a specific AZ

* 특정 AZ에서 __On-Demand__ 인스턴스 용량을 임의의 기간 동안 예약합니다.
* 필요할 때 언제든지 EC2 용량에 액세스할 수 있습니다.
* 시간 약속 없음(언제든지 생성/취소), __청구 할인 없음__
* 지역별 예약 인스턴스 및 절감 계획과 결합하여 청구 할인 혜택 활용
* 인스턴스 실행 여부에 관계없이 주문형 요금이 부과됩니다.

* 특정 AZ에 있어야 하는 단기 중단 없는 워크로드에 적합

### 4.8. Which purchasing option is right for me
* On demand: coming and staying in resort whenever we like, we pay the full price
* Reserved: like planning ahead and if we plan to stay for a long time, we may get a good discount.
* Savings Plans: pay a certain amount per hour for certain period and stay in any room type (e.g., King, Suite, Sea View, …)
* Spot instances: the hotel allows people to bid for the empty rooms and the highest bidder keeps the  rooms. You can get kicked out at any time
* Dedicated Hosts: We book an entire building of the resort
* Capacity Reservations: you book a room for a period with full price even you don’t stay in it

* 온 디맨드: 원할 때 언제든지 리조트에 와서 숙박, 전액을 지불
* 예약: 미리 계획하고 오래 머물 계획이면 할인을 받을 수 있음
* 저축 계획: 특정 기간 동안 시간당 일정 금액을 지불하고 모든 유형의 객실에 숙박(예: King, Suite, Sea View 등)
* 스팟 인스턴스: 호텔은 사람들이 빈 방에 입찰할 수 있도록 허용하고 가장 높은 입찰자가 그 방을 유지, 언제든지 쫓겨날 수 있음
* 전용 호스트: 리조트 건물 전체를 예약
* 용량 예약: 숙박하지 않아도 전체 가격으로 일정 기간 동안 객실을 예약


## 5. Spot Instances
### 5.1. EC2 Spot Instance Requests
* Can get a discount of up to 90% compared to On-demand
* Define max spot price and get the instance while current spot price < max 
    * The hourly spot price varies based on offer and capacity
    * If the current spot price > your max price you can choose to stop or terminate your instance with a 2 minutes grace period.
* Other strategy: Spot Block
    * “block” spot instance during a specified time frame (1 to 6 hours) without interruptions
    * In rare situations, the instance may be reclaimed
        * Spot Blocks are no longer available to new AWS customers since july 1st 2021 And won't be supported after December 31 2022
* Used for batch jobs, data analysis, or workloads that are resilient to failures. 
* Not great for critical jobs or databases

* 주문형 대비 최대 90% 할인 가능
* 최대 현물 가격을 정의하고 현재 현물 가격 < max
    * 시간당 현물 가격은 오퍼 및 용량에 따라 달라집니다.
    * 현재 현물 가격이 당신의 최대 가격보다 높은 경우 2분의 유예 기간을 두고 인스턴스를 중지하거나 종료하도록 선택할 수 있습니다.
* 기타 전략: 스폿 블록
    * 지정된 시간(1~6시간) 동안 중단 없이 스폿 인스턴스를 "차단"
    * 드문 경우지만 인스턴스가 회수될 수 있습니다.
        * 스팟 블록은 2021년 7월 1일 이후 신규 AWS 고객에게 더 이상 제공되지 않습니다. 2022년 12월 31일 이후에는 지원되지 않습니다.
* 장애 발생 시 복원력이 뛰어난 배치 작업, 데이터 분석 또는 워크로드에 사용됩니다.
* 중요한 작업 또는 데이터베이스에 적합하지 않음

### 5.2. How to terminate Spot Instances? (매우 중요!!)
* You can only cancel Spot Instance requests that are open, active, or disabled. 
* Cancelling a Spot Request does not terminate instances
* You must first cancel a Spot Request, and then terminate the associated Spot Instances
* open, active, disabled 인 스폿 인스턴스 요청만 취소할 수 있습니다.
* 스폿 요청을 취소해도 인스턴스가 종료되지 않습니다.
* 먼저 스팟 요청을 취소한 다음 관련 스팟 인스턴스를 종료해야 합니다.

![Untitled](/assets/img/aws_saa_c02/20221228_ec2_terminate_spot_instances.JPG)

* 스팟 요청
    * 지불 의사가 있는 인스턴스 최고 가격
    * 원하는 인스턴스의 개수
    * AMI 등 요구되는 사양
    * 요청의 유효 기간 (무기한 가능)
    * 요청의 유형

* 요청 유형
    * 스팟 인스턴스를 위한 일회성 요청
        * 스팟 요청이 이행되는 즉시 인스턴스가 시작
        * 스팟 요청은 사라짐 (스팟 요청이 사라져도 괜찮은 경우에 사용하는 유형)

    * 사후 인스턴스를 위한 지속적인 요청
        * 스팟 요청의 Valid from부터 Valid until까지의 유효 기간 동안 요청한 개수의 인스턴스들이 계속 유효
        * 어떤 이유로 인스턴스가 중단되거나 스팟 가격 상승을 이유로 방해를 받은 경우에는 스팟 요청이 다시 전달되어 요청이 검증되고 나면 스팟 인스턴스가 재시작
        * 스팟 인스턴스가 중단되어도 스팟 요청이 여전히 활성화되어 있기 때문에 스팟 요청이 자동적으로 인스턴스를 재시작해 줌

* 스팟 요청이 취소되기 위해서는 open, active, disabled 상태여야 함 (failed, cancelled, closed 상태는 불가)
* 스팟 요청을 취소하게 되면 기존에 실행했던 인스턴스는 종료 되지 않음
    * 기존에 실행했던 인스턴스를 종료하는 것은 AWS의 책무가 아닌 사용자의 책무
* 스팟 인스턴스를 영구히 종료하고 재실행되는 일이 없도록 하기 위해서는 먼저 스팟 요청부터 취소한 후 해당 요청과 연결된 스팟 인스턴스를 종료해야함
    * 스팟 인스턴스를 먼저 종료하면 스팟 요청이 다시 작동하여 인스턴스를 다시 실행함

* 올바른 순서
    1. 스팟 요청을 취소 (AWS가 더 이상 새로운 인스턴스를 실행하지 않게끔 함)
    2. 연결된 스팟 인스턴스를 종료


### 5.3. Spot Fleets
극강의 비용 절감을 위한 방법
* Spot Fleets = set of Spot Instances + (optional) On-Demand Instances
* The Spot Fleet will try to meet the target capacity with price constraints
    * Define possible launch pools: instance type (m5.large), OS, Availability Zone
    * Can have multiple launch pools, so that the fleet can choose
    * Spot Fleet stops launching instances when reaching capacity or max cost
* Strategies to allocate Spot Instances:  (중요!)
    * __lowestPrice__: from the pool with the lowest price (cost optimization, short workload) (중요!)
    * __diversified__: distributed across all pools (great for availability, long workloads)
    * __capacityOptimized__: pool with the optimal capacity for the number of instances
* _Spot Fleets allow us to automatically request Spot Instances with the lowest price_

* Spot Fleet = 스폿 인스턴스 세트 + (선택 사항) 주문형 인스턴스
* Spot Fleet은 가격 제약으로 목표 용량을 충족하려고 합니다.
    * 가능한 launch pools 정의: 인스턴스 유형(m5.large), OS, 가용성 영역
    * 여러 개의 launch pools 을 보유하여 fleet이 선택할 수 있음
    * 용량 또는 최대 비용에 도달하면 Spot Fleet이 인스턴스 시작을 중지합니다.
* Spot Instances 할당 전략:  (중요!)
    * __최저가격__: 최저가격(비용 최적화, 짧은 워크로드)의 pool에서 제공 (중요!)
    * __다양화__: 모든 pool에 분산됨(가용성 및 긴 워크로드에 적합)
    * __용량최적화__: 인스턴스 수에 맞는 최적의 용량을 갖춘 pool
* _스팟 플릿을 사용하면 최저 가격으로 스팟 인스턴스를 자동으로 요청할 수 있습니다_


### Summary 
* EC2 Instance: AMI (OS) + Instance Size (CPU + RAM) + Storage + security groups + EC2 User Data
* Security Groups: Firewall attached to the EC2 instance
* EC2 User Data: Script launched at the first start of an instance
* SSH: start a terminal into our EC2 Instances (port 22)
* EC2 Instance Role: link to IAM roles
* Purchasing Options: On-Demand, Spot, Reserved (Standard + Convertible + Scheduled), Dedicated Host, Dedicated Instance

* EC2 인스턴스: AMI(OS) + 인스턴스 크기(CPU + RAM) + 스토리지 + 보안 그룹 + EC2 사용자 데이터
* 보안 그룹: EC2 인스턴스에 연결된 방화벽
* EC2 사용자 데이터: 인스턴스의 첫 번째 시작 시 실행되는 스크립트
* SSH: EC2 인스턴스에 터미널을 시작합니다(포트 22).
* EC2 인스턴스 역할: IAM 역할 링크
* 구매 옵션: 주문형, 스폿, 예약(표준 + 컨버터블 + 예약됨), 전용 호스트, 전용 인스턴스

### Reference
Stephane Maarek,【글로벌 Best】 AWS Certified Solutions Architect Associate 시험합격!, Udemy
 (https://www.udemy.com/course/best-aws-certified-solutions-architect-associate/)